# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:59:39+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    AecmwCertificatePostRequest,
    AecmwCertificatePostResponse,
    AecmwCertificatePostResponse1,
    AecmwCertificatePostResponse2,
    AecmwCertificatePostResponse3,
    AecmwCertificatePostResponse4,
    AecmwCertificatePostResponse5,
    AecmwCertificatePostResponse6,
    AemtwCertificatePostRequest,
    AemtwCertificatePostResponse,
    AemtwCertificatePostResponse1,
    AemtwCertificatePostResponse2,
    AemtwCertificatePostResponse3,
    AemtwCertificatePostResponse4,
    AemtwCertificatePostResponse5,
    AemtwCertificatePostResponse6,
    AgcerCertificatePostRequest,
    AgcerCertificatePostResponse,
    AgcerCertificatePostResponse1,
    AgcerCertificatePostResponse2,
    AgcerCertificatePostResponse3,
    AgcerCertificatePostResponse4,
    AgcerCertificatePostResponse5,
    AgcerCertificatePostResponse6,
    AlimwCertificatePostRequest,
    AlimwCertificatePostResponse,
    AlimwCertificatePostResponse1,
    AlimwCertificatePostResponse2,
    AlimwCertificatePostResponse3,
    AlimwCertificatePostResponse4,
    AlimwCertificatePostResponse5,
    AlimwCertificatePostResponse6,
    ArcmwCertificatePostRequest,
    ArcmwCertificatePostResponse,
    ArcmwCertificatePostResponse1,
    ArcmwCertificatePostResponse2,
    ArcmwCertificatePostResponse3,
    ArcmwCertificatePostResponse4,
    ArcmwCertificatePostResponse5,
    ArcmwCertificatePostResponse6,
    ArmtwCertificatePostRequest,
    ArmtwCertificatePostResponse,
    ArmtwCertificatePostResponse1,
    ArmtwCertificatePostResponse2,
    ArmtwCertificatePostResponse3,
    ArmtwCertificatePostResponse4,
    ArmtwCertificatePostResponse5,
    ArmtwCertificatePostResponse6,
    BacerCertificatePostRequest,
    BacerCertificatePostResponse,
    BacerCertificatePostResponse1,
    BacerCertificatePostResponse2,
    BacerCertificatePostResponse3,
    BacerCertificatePostResponse4,
    BacerCertificatePostResponse5,
    BacerCertificatePostResponse6,
    BhcerCertificatePostRequest,
    BhcerCertificatePostResponse,
    BhcerCertificatePostResponse1,
    BhcerCertificatePostResponse2,
    BhcerCertificatePostResponse3,
    BhcerCertificatePostResponse4,
    BhcerCertificatePostResponse5,
    BhcerCertificatePostResponse6,
    BpcrdCertificatePostRequest,
    BpcrdCertificatePostResponse,
    BpcrdCertificatePostResponse1,
    BpcrdCertificatePostResponse2,
    BpcrdCertificatePostResponse3,
    BpcrdCertificatePostResponse4,
    BpcrdCertificatePostResponse5,
    BpcrdCertificatePostResponse6,
    BtcerCertificatePostRequest,
    BtcerCertificatePostResponse,
    BtcerCertificatePostResponse1,
    BtcerCertificatePostResponse2,
    BtcerCertificatePostResponse3,
    BtcerCertificatePostResponse4,
    BtcerCertificatePostResponse5,
    BtcerCertificatePostResponse6,
    CecerCertificatePostRequest,
    CecerCertificatePostResponse,
    CecerCertificatePostResponse1,
    CecerCertificatePostResponse2,
    CecerCertificatePostResponse3,
    CecerCertificatePostResponse4,
    CecerCertificatePostResponse5,
    CecerCertificatePostResponse6,
    ChcerCertificatePostRequest,
    ChcerCertificatePostResponse,
    ChcerCertificatePostResponse1,
    ChcerCertificatePostResponse2,
    ChcerCertificatePostResponse3,
    ChcerCertificatePostResponse4,
    ChcerCertificatePostResponse5,
    ChcerCertificatePostResponse6,
    ClcerCertificatePostRequest,
    ClcerCertificatePostResponse,
    ClcerCertificatePostResponse1,
    ClcerCertificatePostResponse2,
    ClcerCertificatePostResponse3,
    ClcerCertificatePostResponse4,
    ClcerCertificatePostResponse5,
    ClcerCertificatePostResponse6,
    CoprgCertificatePostRequest,
    CoprgCertificatePostResponse,
    CoprgCertificatePostResponse1,
    CoprgCertificatePostResponse2,
    CoprgCertificatePostResponse3,
    CoprgCertificatePostResponse4,
    CoprgCertificatePostResponse5,
    CoprgCertificatePostResponse6,
    DccerCertificatePostRequest,
    DccerCertificatePostResponse,
    DccerCertificatePostResponse1,
    DccerCertificatePostResponse2,
    DccerCertificatePostResponse3,
    DccerCertificatePostResponse4,
    DccerCertificatePostResponse5,
    DccerCertificatePostResponse6,
    DmcerCertificatePostRequest,
    DmcerCertificatePostResponse,
    DmcerCertificatePostResponse1,
    DmcerCertificatePostResponse2,
    DmcerCertificatePostResponse3,
    DmcerCertificatePostResponse4,
    DmcerCertificatePostResponse5,
    DmcerCertificatePostResponse6,
    DpicrCertificatePostRequest,
    DpicrCertificatePostResponse,
    DpicrCertificatePostResponse1,
    DpicrCertificatePostResponse2,
    DpicrCertificatePostResponse3,
    DpicrCertificatePostResponse4,
    DpicrCertificatePostResponse5,
    DpicrCertificatePostResponse6,
    DtcerCertificatePostRequest,
    DtcerCertificatePostResponse,
    DtcerCertificatePostResponse1,
    DtcerCertificatePostResponse2,
    DtcerCertificatePostResponse3,
    DtcerCertificatePostResponse4,
    DtcerCertificatePostResponse5,
    DtcerCertificatePostResponse6,
    ErcerCertificatePostRequest,
    ErcerCertificatePostResponse,
    ErcerCertificatePostResponse1,
    ErcerCertificatePostResponse2,
    ErcerCertificatePostResponse3,
    ErcerCertificatePostResponse4,
    ErcerCertificatePostResponse5,
    ErcerCertificatePostResponse6,
    FfcerCertificatePostRequest,
    FfcerCertificatePostResponse,
    FfcerCertificatePostResponse1,
    FfcerCertificatePostResponse2,
    FfcerCertificatePostResponse3,
    FfcerCertificatePostResponse4,
    FfcerCertificatePostResponse5,
    FfcerCertificatePostResponse6,
    IgcerCertificatePostRequest,
    IgcerCertificatePostResponse,
    IgcerCertificatePostResponse1,
    IgcerCertificatePostResponse2,
    IgcerCertificatePostResponse3,
    IgcerCertificatePostResponse4,
    IgcerCertificatePostResponse5,
    IgcerCertificatePostResponse6,
    IncerCertificatePostRequest,
    IncerCertificatePostResponse,
    IncerCertificatePostResponse1,
    IncerCertificatePostResponse2,
    IncerCertificatePostResponse3,
    IncerCertificatePostResponse4,
    IncerCertificatePostResponse5,
    IncerCertificatePostResponse6,
    LhcerCertificatePostRequest,
    LhcerCertificatePostResponse,
    LhcerCertificatePostResponse1,
    LhcerCertificatePostResponse2,
    LhcerCertificatePostResponse3,
    LhcerCertificatePostResponse4,
    LhcerCertificatePostResponse5,
    LhcerCertificatePostResponse6,
    MncerCertificatePostRequest,
    MncerCertificatePostResponse,
    MncerCertificatePostResponse1,
    MncerCertificatePostResponse2,
    MncerCertificatePostResponse3,
    MncerCertificatePostResponse4,
    MncerCertificatePostResponse5,
    MncerCertificatePostResponse6,
    MnrgaCertificatePostRequest,
    MnrgaCertificatePostResponse,
    MnrgaCertificatePostResponse1,
    MnrgaCertificatePostResponse2,
    MnrgaCertificatePostResponse3,
    MnrgaCertificatePostResponse4,
    MnrgaCertificatePostResponse5,
    MnrgaCertificatePostResponse6,
    ObcerCertificatePostRequest,
    ObcerCertificatePostResponse,
    ObcerCertificatePostResponse1,
    ObcerCertificatePostResponse2,
    ObcerCertificatePostResponse3,
    ObcerCertificatePostResponse4,
    ObcerCertificatePostResponse5,
    ObcerCertificatePostResponse6,
    RacerCertificatePostRequest,
    RacerCertificatePostResponse,
    RacerCertificatePostResponse1,
    RacerCertificatePostResponse2,
    RacerCertificatePostResponse3,
    RacerCertificatePostResponse4,
    RacerCertificatePostResponse5,
    RacerCertificatePostResponse6,
    RmcerCertificatePostRequest,
    RmcerCertificatePostResponse,
    RmcerCertificatePostResponse1,
    RmcerCertificatePostResponse2,
    RmcerCertificatePostResponse3,
    RmcerCertificatePostResponse4,
    RmcerCertificatePostResponse5,
    RmcerCertificatePostResponse6,
    SecerCertificatePostRequest,
    SecerCertificatePostResponse,
    SecerCertificatePostResponse1,
    SecerCertificatePostResponse2,
    SecerCertificatePostResponse3,
    SecerCertificatePostResponse4,
    SecerCertificatePostResponse5,
    SecerCertificatePostResponse6,
    ShcerCertificatePostRequest,
    ShcerCertificatePostResponse,
    ShcerCertificatePostResponse1,
    ShcerCertificatePostResponse2,
    ShcerCertificatePostResponse3,
    ShcerCertificatePostResponse4,
    ShcerCertificatePostResponse5,
    ShcerCertificatePostResponse6,
    SicrdCertificatePostRequest,
    SicrdCertificatePostResponse,
    SicrdCertificatePostResponse1,
    SicrdCertificatePostResponse2,
    SicrdCertificatePostResponse3,
    SicrdCertificatePostResponse4,
    SicrdCertificatePostResponse5,
    SicrdCertificatePostResponse6,
    SrcerCertificatePostRequest,
    SrcerCertificatePostResponse,
    SrcerCertificatePostResponse1,
    SrcerCertificatePostResponse2,
    SrcerCertificatePostResponse3,
    SrcerCertificatePostResponse4,
    SrcerCertificatePostResponse5,
    SrcerCertificatePostResponse6,
)

app = MCPProxy(
    description="eDistrict Himachal (http://edistrict.hp.gov.in/) is the online service delivery portal for Himachal Pradesh State Govt. Certain documents issued by it (e.g. Birth, Income, Caste, Agriculturist, Bonafide Himachali Certificates etc) can be pulled into citizens' DigiLocker accounts.",
    termsOfService='https://apisetu.gov.in/terms.php',
    title='eDistrict Himachal Pradesh, Himachal Pradesh',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/edistricthp/v3'}],
)


@app.post(
    '/aecmw/certificate',
    description=""" API to verify Application for Renewal of Contractor Migrant Workmen license. """,
    tags=[
        'contractor_registration_certifications',
        'employment_registration_certifications',
    ],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def aecmw(body: AecmwCertificatePostRequest = None):
    """
    Application for Renewal of Contractor Migrant Workmen license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/aemtw/certificate',
    description=""" API to verify Application for Renewal of Motor Transport Worker Registration. """,
    tags=['contractor_registration_certifications'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def aemtw(body: AemtwCertificatePostRequest = None):
    """
    Application for Renewal of Motor Transport Worker Registration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/agcer/certificate',
    description=""" API to verify Agriculture/ Agriculturist Certificate. """,
    tags=['agricultural_certifications'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def agcer(body: AgcerCertificatePostRequest = None):
    """
    Agriculture/ Agriculturist Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/alimw/certificate',
    description=""" API to verify Application for License for Inter State Migrant Workmen. """,
    tags=[
        'contractor_registration_certifications',
        'employment_registration_certifications',
    ],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def alimw(body: AlimwCertificatePostRequest = None):
    """
    Application for License for Inter State Migrant Workmen
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/arcmw/certificate',
    description=""" API to verify Application for Registration of Contractor Migrant Workmen license. """,
    tags=[
        'contractor_registration_certifications',
        'employment_registration_certifications',
    ],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def arcmw(body: ArcmwCertificatePostRequest = None):
    """
    Application for Registration of Contractor Migrant Workmen license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/armtw/certificate',
    description=""" API to verify Application for Registration of Motor Transport Worker Registration. """,
    tags=['contractor_registration_certifications'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def armtw(body: ArmtwCertificatePostRequest = None):
    """
    Application for Registration of Motor Transport Worker Registration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/bacer/certificate',
    description=""" API to verify Backward Area Certificate. """,
    tags=['agricultural_certifications'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def bacer(body: BacerCertificatePostRequest = None):
    """
    Backward Area Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/bhcer/certificate',
    description=""" API to verify Bonafide Certificate. """,
    tags=['personal_identity_certificates'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def bhcer(body: BhcerCertificatePostRequest = None):
    """
    Bonafide Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/bpcrd/certificate',
    description=""" API to verify BPL Card. """,
    tags=['socioeconomic_certifications'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def bpcrd(body: BpcrdCertificatePostRequest = None):
    """
    BPL Card
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/btcer/certificate',
    description=""" API to verify Birth Certificate. """,
    tags=['personal_identity_certificates'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def btcer(body: BtcerCertificatePostRequest = None):
    """
    Birth Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/cecer/certificate',
    description=""" API to verify Renewal Certificate of Contract Labour License. """,
    tags=[
        'contractor_registration_certifications',
        'employment_registration_certifications',
    ],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def cecer(body: CecerCertificatePostRequest = None):
    """
    Renewal Certificate of Contract Labour License
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/chcer/certificate',
    description=""" API to verify Character Certificate. """,
    tags=['personal_identity_certificates'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def chcer(body: ChcerCertificatePostRequest = None):
    """
    Character Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/clcer/certificate',
    description=""" API to verify Registration Certificate for Contract Labour License. """,
    tags=[
        'contractor_registration_certifications',
        'employment_registration_certifications',
    ],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def clcer(body: ClcerCertificatePostRequest = None):
    """
    Registration Certificate for Contract Labour License
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/coprg/certificate',
    description=""" API to verify Copy of Pariwar Register. """,
    tags=['personal_identity_certificates', 'socioeconomic_certifications'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def coprg(body: CoprgCertificatePostRequest = None):
    """
    Copy of Pariwar Register
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dccer/certificate',
    description=""" API to verify Dogra Class Certificate. """,
    tags=['personal_identity_certificates'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def dccer(body: DccerCertificatePostRequest = None):
    """
    Dogra Class Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dmcer/certificate',
    description=""" API to verify Domicile Certificate. """,
    tags=['personal_identity_certificates', 'socioeconomic_certifications'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def dmcer(body: DmcerCertificatePostRequest = None):
    """
    Domicile Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dpicr/certificate',
    description=""" API to verify Disabled Person Identity Card/ Certificate. """,
    tags=['personal_identity_certificates', 'identity_card_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def dpicr(body: DpicrCertificatePostRequest = None):
    """
    Disabled Person Identity Card/ Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dtcer/certificate',
    description=""" API to verify Death Certificate. """,
    tags=['personal_identity_certificates'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def dtcer(body: DtcerCertificatePostRequest = None):
    """
    Death Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ercer/certificate',
    description=""" API to verify Registration Certificate of Establishment Employing Contract Labour. """,
    tags=[
        'employment_registration_certifications',
        'contractor_registration_certifications',
    ],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def ercer(body: ErcerCertificatePostRequest = None):
    """
    Registration Certificate of Establishment Employing Contract Labour
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ffcer/certificate',
    description=""" API to verify Freedom Fighter Certificate. """,
    tags=['specific_category_certifications'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def ffcer(body: FfcerCertificatePostRequest = None):
    """
    Freedom Fighter Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/igcer/certificate',
    description=""" API to verify Indigent (Needy Person) Certificate. """,
    tags=['specific_category_certifications', 'socioeconomic_certifications'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def igcer(body: IgcerCertificatePostRequest = None):
    """
    Indigent (Needy Person) Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/incer/certificate',
    description=""" API to verify Income Certificate. """,
    tags=['socioeconomic_certifications', 'personal_identity_certificates'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def incer(body: IncerCertificatePostRequest = None):
    """
    Income Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/lhcer/certificate',
    description=""" API to verify Legal Heir Certificate. """,
    tags=['personal_identity_certificates'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def lhcer(body: LhcerCertificatePostRequest = None):
    """
    Legal Heir Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mncer/certificate',
    description=""" API to verify Minority Certificate. """,
    tags=['specific_category_certifications', 'socioeconomic_certifications'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def mncer(body: MncerCertificatePostRequest = None):
    """
    Minority Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mnrga/certificate',
    description=""" API to verify MNREGA Job Card. """,
    tags=['employment_registration_certifications', 'socioeconomic_certifications'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def mnrga(body: MnrgaCertificatePostRequest = None):
    """
    MNREGA Job Card
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/obcer/certificate',
    description=""" API to verify OBC Certificate. """,
    tags=['personal_identity_certificates', 'socioeconomic_certifications'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def obcer(body: ObcerCertificatePostRequest = None):
    """
    OBC Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/racer/certificate',
    description=""" API to verify Rural Area Certificate. """,
    tags=['agricultural_certifications'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def racer(body: RacerCertificatePostRequest = None):
    """
    Rural Area Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rmcer/certificate',
    description=""" API to verify Marriage Certificate. """,
    tags=['personal_identity_certificates'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def rmcer(body: RmcerCertificatePostRequest = None):
    """
    Marriage Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/secer/certificate',
    description=""" API to verify Renewal Certificate of Shops And Commercial Establishment. """,
    tags=[
        'employment_registration_certifications',
        'commercial_registration_certificates',
    ],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def secer(body: SecerCertificatePostRequest = None):
    """
    Renewal Certificate of Shops And Commercial Establishment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/shcer/certificate',
    description=""" API to verify SC/ST  Certificate. """,
    tags=['socioeconomic_certifications', 'specific_category_certifications'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def shcer(body: ShcerCertificatePostRequest = None):
    """
    SC/ST  Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sicrd/certificate',
    description=""" API to verify Senior Citizen Identity Card/ Certificate. """,
    tags=['personal_identity_certificates', 'identity_card_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def sicrd(body: SicrdCertificatePostRequest = None):
    """
    Senior Citizen Identity Card/ Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/srcer/certificate',
    description=""" API to verify Registration Certificate of Shops And Commercial Establishment. """,
    tags=[
        'commercial_registration_certificates',
        'employment_registration_certifications',
    ],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def srcer(body: SrcerCertificatePostRequest = None):
    """
    Registration Certificate of Shops And Commercial Establishment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
